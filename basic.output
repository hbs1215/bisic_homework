Terminals unused in grammar

   ENDIF
   ELSE


State 31 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: line
    2        | line program

    3 line: LINENUM command
    4     | NEWLINE

    5 command: REM COMMENT
    6        | GOTO INTEGER
    7        | LET VAR EQUAL expr
    8        | LET VAR '[' expr bracket EQUAL expr
    9        | DIM VAR AS '[' expr bracket
   10        | PRINT expr
   11        | PRINT text
   12        | INPUT VAR
   13        | ifstmt

   14 ifstmt: ifstmt ifelse
   15       | IF expr THEN INTEGER

   16 ifelse: ELSEIF expr INTEGER

   17 text: STRING

   18 expr: expr GREATER expr2
   19     | expr SMALLER expr2
   20     | expr GREATEQUAL expr2
   21     | expr SMALLEQUAL expr2
   22     | expr EQUAL expr2
   23     | expr INEQUAL expr2
   24     | expr OR expr2
   25     | expr AND expr2
   26     | expr2

   27 expr2: expr2 PLUS term
   28      | expr2 MINUS term
   29      | term

   30 term: term DIVIDE factor
   31     | term MULTI factor
   32     | term MODULO factor
   33     | factor

   34 factor: '(' expr ')'
   35       | MINUS factor
   36       | NEGATION factor
   37       | VAR
   38       | INTEGER

   39 INTEGER: INTEGER DIGIT
   40        | DIGIT

   41 bracket: CLOSE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 34
')' (41) 34
'[' (91) 8 9
error (256)
NEWLINE (258) 4
COMMENT (259) 5
LINENUM (260) 3
REM (261) 5
GOTO (262) 6
LET (263) 7 8
DIM (264) 9
AS (265) 9
PRINT (266) 10 11
INPUT (267) 12
VAR (268) 7 8 9 12 37
PLUS (269) 27
MINUS (270) 28 35
MODULO (271) 32
MULTI (272) 31
DIVIDE (273) 30
GREATER (274) 18
SMALLER (275) 19
GREATEQUAL (276) 20
SMALLEQUAL (277) 21
INEQUAL (278) 23
EQUAL (279) 7 8 22
AND (280) 25
OR (281) 24
NEGATION (282) 36
IF (283) 15
THEN (284) 15
ENDIF (285)
ELSEIF (286) 16
ELSE (287)
DIGIT (288) 39 40
STRING (289) 17
CLOSE (290) 41


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1 2, on right: 0 2
line (41)
    on left: 3 4, on right: 1 2
command (42)
    on left: 5 6 7 8 9 10 11 12 13, on right: 3
ifstmt (43)
    on left: 14 15, on right: 13 14
ifelse (44)
    on left: 16, on right: 14
text (45)
    on left: 17, on right: 11
expr (46)
    on left: 18 19 20 21 22 23 24 25 26, on right: 7 8 9 10 15 16 18
    19 20 21 22 23 24 25 34
expr2 (47)
    on left: 27 28 29, on right: 18 19 20 21 22 23 24 25 26 27 28
term (48)
    on left: 30 31 32 33, on right: 27 28 29 30 31 32
factor (49)
    on left: 34 35 36 37 38, on right: 30 31 32 33 35 36
INTEGER (50)
    on left: 39 40, on right: 6 15 16 38 39
bracket (51)
    on left: 41, on right: 8 9


State 0

    0 $accept: . program $end

    NEWLINE  shift, and go to state 1
    LINENUM  shift, and go to state 2

    program  go to state 3
    line     go to state 4


State 1

    4 line: NEWLINE .

    $default  reduce using rule 4 (line)


State 2

    3 line: LINENUM . command

    REM    shift, and go to state 5
    GOTO   shift, and go to state 6
    LET    shift, and go to state 7
    DIM    shift, and go to state 8
    PRINT  shift, and go to state 9
    INPUT  shift, and go to state 10
    IF     shift, and go to state 11

    command  go to state 12
    ifstmt   go to state 13


State 3

    0 $accept: program . $end

    $end  shift, and go to state 14


State 4

    1 program: line .
    2        | line . program

    NEWLINE  shift, and go to state 1
    LINENUM  shift, and go to state 2

    $default  reduce using rule 1 (program)

    program  go to state 15
    line     go to state 4


State 5

    5 command: REM . COMMENT

    COMMENT  shift, and go to state 16


State 6

    6 command: GOTO . INTEGER

    DIGIT  shift, and go to state 17

    INTEGER  go to state 18


State 7

    7 command: LET . VAR EQUAL expr
    8        | LET . VAR '[' expr bracket EQUAL expr

    VAR  shift, and go to state 19


State 8

    9 command: DIM . VAR AS '[' expr bracket

    VAR  shift, and go to state 20


State 9

   10 command: PRINT . expr
   11        | PRINT . text

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    STRING    shift, and go to state 24
    '('       shift, and go to state 25

    text     go to state 26
    expr     go to state 27
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 10

   12 command: INPUT . VAR

    VAR  shift, and go to state 32


State 11

   15 ifstmt: IF . expr THEN INTEGER

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 33
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 12

    3 line: LINENUM command .

    $default  reduce using rule 3 (line)


State 13

   13 command: ifstmt .
   14 ifstmt: ifstmt . ifelse

    ELSEIF  shift, and go to state 34

    $default  reduce using rule 13 (command)

    ifelse  go to state 35


State 14

    0 $accept: program $end .

    $default  accept


State 15

    2 program: line program .

    $default  reduce using rule 2 (program)


State 16

    5 command: REM COMMENT .

    $default  reduce using rule 5 (command)


State 17

   40 INTEGER: DIGIT .

    $default  reduce using rule 40 (INTEGER)


State 18

    6 command: GOTO INTEGER .
   39 INTEGER: INTEGER . DIGIT

    DIGIT  shift, and go to state 36

    $default  reduce using rule 6 (command)


State 19

    7 command: LET VAR . EQUAL expr
    8        | LET VAR . '[' expr bracket EQUAL expr

    EQUAL  shift, and go to state 37
    '['    shift, and go to state 38


State 20

    9 command: DIM VAR . AS '[' expr bracket

    AS  shift, and go to state 39


State 21

   37 factor: VAR .

    $default  reduce using rule 37 (factor)


State 22

   35 factor: MINUS . factor

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    factor   go to state 40
    INTEGER  go to state 31


State 23

   36 factor: NEGATION . factor

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    factor   go to state 41
    INTEGER  go to state 31


State 24

   17 text: STRING .

    $default  reduce using rule 17 (text)


State 25

   34 factor: '(' . expr ')'

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 42
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 26

   11 command: PRINT text .

    $default  reduce using rule 11 (command)


State 27

   10 command: PRINT expr .
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50

    $default  reduce using rule 10 (command)


State 28

   26 expr: expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 26 (expr)


State 29

   29 expr2: term .
   30 term: term . DIVIDE factor
   31     | term . MULTI factor
   32     | term . MODULO factor

    MODULO  shift, and go to state 53
    MULTI   shift, and go to state 54
    DIVIDE  shift, and go to state 55

    $default  reduce using rule 29 (expr2)


State 30

   33 term: factor .

    $default  reduce using rule 33 (term)


State 31

   38 factor: INTEGER .
   39 INTEGER: INTEGER . DIGIT

    DIGIT  shift, and go to state 36

    DIGIT     [reduce using rule 38 (factor)]
    $default  reduce using rule 38 (factor)


State 32

   12 command: INPUT VAR .

    $default  reduce using rule 12 (command)


State 33

   15 ifstmt: IF expr . THEN INTEGER
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50
    THEN        shift, and go to state 56


State 34

   16 ifelse: ELSEIF . expr INTEGER

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 57
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 35

   14 ifstmt: ifstmt ifelse .

    $default  reduce using rule 14 (ifstmt)


State 36

   39 INTEGER: INTEGER DIGIT .

    $default  reduce using rule 39 (INTEGER)


State 37

    7 command: LET VAR EQUAL . expr

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 58
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 38

    8 command: LET VAR '[' . expr bracket EQUAL expr

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 59
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 39

    9 command: DIM VAR AS . '[' expr bracket

    '['  shift, and go to state 60


State 40

   35 factor: MINUS factor .

    $default  reduce using rule 35 (factor)


State 41

   36 factor: NEGATION factor .

    $default  reduce using rule 36 (factor)


State 42

   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2
   34 factor: '(' expr . ')'

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50
    ')'         shift, and go to state 61


State 43

   18 expr: expr GREATER . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 62
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 44

   19 expr: expr SMALLER . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 63
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 45

   20 expr: expr GREATEQUAL . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 64
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 46

   21 expr: expr SMALLEQUAL . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 65
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 47

   23 expr: expr INEQUAL . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 66
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 48

   22 expr: expr EQUAL . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 67
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 49

   25 expr: expr AND . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 68
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 50

   24 expr: expr OR . expr2

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr2    go to state 69
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 51

   27 expr2: expr2 PLUS . term

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    term     go to state 70
    factor   go to state 30
    INTEGER  go to state 31


State 52

   28 expr2: expr2 MINUS . term

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    term     go to state 71
    factor   go to state 30
    INTEGER  go to state 31


State 53

   32 term: term MODULO . factor

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    factor   go to state 72
    INTEGER  go to state 31


State 54

   31 term: term MULTI . factor

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    factor   go to state 73
    INTEGER  go to state 31


State 55

   30 term: term DIVIDE . factor

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    factor   go to state 74
    INTEGER  go to state 31


State 56

   15 ifstmt: IF expr THEN . INTEGER

    DIGIT  shift, and go to state 17

    INTEGER  go to state 75


State 57

   16 ifelse: ELSEIF expr . INTEGER
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50
    DIGIT       shift, and go to state 17

    INTEGER  go to state 76


State 58

    7 command: LET VAR EQUAL expr .
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50

    $default  reduce using rule 7 (command)


State 59

    8 command: LET VAR '[' expr . bracket EQUAL expr
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50
    CLOSE       shift, and go to state 77

    bracket  go to state 78


State 60

    9 command: DIM VAR AS '[' . expr bracket

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 79
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 61

   34 factor: '(' expr ')' .

    $default  reduce using rule 34 (factor)


State 62

   18 expr: expr GREATER expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 18 (expr)


State 63

   19 expr: expr SMALLER expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 19 (expr)


State 64

   20 expr: expr GREATEQUAL expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 20 (expr)


State 65

   21 expr: expr SMALLEQUAL expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 21 (expr)


State 66

   23 expr: expr INEQUAL expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 23 (expr)


State 67

   22 expr: expr EQUAL expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 22 (expr)


State 68

   25 expr: expr AND expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 25 (expr)


State 69

   24 expr: expr OR expr2 .
   27 expr2: expr2 . PLUS term
   28      | expr2 . MINUS term

    PLUS   shift, and go to state 51
    MINUS  shift, and go to state 52

    $default  reduce using rule 24 (expr)


State 70

   27 expr2: expr2 PLUS term .
   30 term: term . DIVIDE factor
   31     | term . MULTI factor
   32     | term . MODULO factor

    MODULO  shift, and go to state 53
    MULTI   shift, and go to state 54
    DIVIDE  shift, and go to state 55

    $default  reduce using rule 27 (expr2)


State 71

   28 expr2: expr2 MINUS term .
   30 term: term . DIVIDE factor
   31     | term . MULTI factor
   32     | term . MODULO factor

    MODULO  shift, and go to state 53
    MULTI   shift, and go to state 54
    DIVIDE  shift, and go to state 55

    $default  reduce using rule 28 (expr2)


State 72

   32 term: term MODULO factor .

    $default  reduce using rule 32 (term)


State 73

   31 term: term MULTI factor .

    $default  reduce using rule 31 (term)


State 74

   30 term: term DIVIDE factor .

    $default  reduce using rule 30 (term)


State 75

   15 ifstmt: IF expr THEN INTEGER .
   39 INTEGER: INTEGER . DIGIT

    DIGIT  shift, and go to state 36

    $default  reduce using rule 15 (ifstmt)


State 76

   16 ifelse: ELSEIF expr INTEGER .
   39 INTEGER: INTEGER . DIGIT

    DIGIT  shift, and go to state 36

    $default  reduce using rule 16 (ifelse)


State 77

   41 bracket: CLOSE .

    $default  reduce using rule 41 (bracket)


State 78

    8 command: LET VAR '[' expr bracket . EQUAL expr

    EQUAL  shift, and go to state 80


State 79

    9 command: DIM VAR AS '[' expr . bracket
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50
    CLOSE       shift, and go to state 77

    bracket  go to state 81


State 80

    8 command: LET VAR '[' expr bracket EQUAL . expr

    VAR       shift, and go to state 21
    MINUS     shift, and go to state 22
    NEGATION  shift, and go to state 23
    DIGIT     shift, and go to state 17
    '('       shift, and go to state 25

    expr     go to state 82
    expr2    go to state 28
    term     go to state 29
    factor   go to state 30
    INTEGER  go to state 31


State 81

    9 command: DIM VAR AS '[' expr bracket .

    $default  reduce using rule 9 (command)


State 82

    8 command: LET VAR '[' expr bracket EQUAL expr .
   18 expr: expr . GREATER expr2
   19     | expr . SMALLER expr2
   20     | expr . GREATEQUAL expr2
   21     | expr . SMALLEQUAL expr2
   22     | expr . EQUAL expr2
   23     | expr . INEQUAL expr2
   24     | expr . OR expr2
   25     | expr . AND expr2

    GREATER     shift, and go to state 43
    SMALLER     shift, and go to state 44
    GREATEQUAL  shift, and go to state 45
    SMALLEQUAL  shift, and go to state 46
    INEQUAL     shift, and go to state 47
    EQUAL       shift, and go to state 48
    AND         shift, and go to state 49
    OR          shift, and go to state 50

    $default  reduce using rule 8 (command)
